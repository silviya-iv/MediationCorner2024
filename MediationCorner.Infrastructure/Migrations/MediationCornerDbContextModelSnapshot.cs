// <auto-generated />
using System;
using MediationCorner.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MediationCorner.Infrastructure.Migrations
{
    [DbContext(typeof(MediationCornerDbContext))]
    partial class MediationCornerDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.28")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("MediationCorner.Infrastructure.Data.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "dea12856-c198-4129-b3f3-b893d8395082",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "08effea3-4811-4e37-8c17-29f445b37dfa",
                            Email = "client1@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Иван",
                            LastName = "Иванов",
                            LockoutEnabled = false,
                            NormalizedEmail = "CLIENT1@GMAIL.COM",
                            NormalizedUserName = "CLIENT1@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEJVpnG9/jN4DWTpZALxq9GhOeAQi+eJ6Pf9wsg5+/K/Co5z9fBpOp/ZwdfGPIXUwqA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "81180767-4572-4110-9527-f39f794f57fc",
                            TwoFactorEnabled = false,
                            UserName = "client1@gmail.com"
                        },
                        new
                        {
                            Id = "6d5800ce-d726-4fc8-83d9-d6b3ac1f591e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "647d3c3e-fe54-4ae6-97c5-8b9f0ddf7e6c",
                            Email = "client2@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Петър",
                            LastName = "Петров",
                            LockoutEnabled = false,
                            NormalizedEmail = "CLIENT2@GMAIL.COM",
                            NormalizedUserName = "CLIENT2@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEKOmil0lAirqKXcFVoSeBoO9joSMkZUh3pNkTaQ+FgLXtNkvV03q+vMN79k3WwCh+Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "61bea838-b688-438b-a883-90b0248436fa",
                            TwoFactorEnabled = false,
                            UserName = "client2@gmail.com"
                        },
                        new
                        {
                            Id = "e43ce836-997d-4927-ac59-74e8c41bbfd3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8441d61c-6039-4211-a2d5-5d2bcaf0d5e8",
                            Email = "mediation.law.corner@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Вероника",
                            LastName = "Иванова",
                            LockoutEnabled = false,
                            NormalizedEmail = "MEDIATION.LAW.CORNER@GMAIL.COM",
                            NormalizedUserName = "MEDIATION.LAW.CORNER@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAENnaHnSFchpS/28VIIGJFCGocviThU4Aqn6nxf6L8NvB2wQkIa7qN5iGOG/n26f0dA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "30f0aa6e-772c-469e-a6d5-8cfca9b0b6fb",
                            TwoFactorEnabled = false,
                            UserName = "mediation.law.corner@gmail.com"
                        });
                });

            modelBuilder.Entity("MediationCorner.Infrastructure.Data.Models.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Appointment identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Client");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2")
                        .HasComment("End time for the appointment");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Reason for the appointment");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2")
                        .HasComment("Starting time of the appointment");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("StartTime")
                        .IsUnique();

                    b.ToTable("Appointments");

                    b.HasData(
                        new
                        {
                            Id = 2,
                            ClientId = "6d5800ce-d726-4fc8-83d9-d6b3ac1f591e",
                            EndTime = new DateTime(2024, 4, 25, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            ShortDescription = "Консултация от относно развод",
                            StartTime = new DateTime(2024, 4, 30, 13, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 1,
                            ClientId = "dea12856-c198-4129-b3f3-b893d8395082",
                            EndTime = new DateTime(2024, 4, 30, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            ShortDescription = "Консултация относно посредничство",
                            StartTime = new DateTime(2024, 4, 30, 10, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("MediationCorner.Infrastructure.Data.Models.FrequentlyAskedQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Question identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasComment("Response to question");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("Question");

                    b.HasKey("Id");

                    b.ToTable("FrequentlyAskedQuestions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Answer = "Целта на нашата платформа за посредничество е да осигурим ефективен и бърз начин за решаване на спорове и конфликти. Чрез нашата услуга можете да намерите квалифицирани посредници, да инициирате процеса на посредничество и да управлявате вашия случай онлайн.",
                            Question = "Каква е целта на тази платформа за посредничество?"
                        },
                        new
                        {
                            Id = 2,
                            Answer = "Първо, регистрирате профил и предоставяте информация за вашия спор. След това, системата ще ви предложи квалифицирани посредници, които отговарят на вашите нужди. След като изберете посредник, можете да започнете процеса на посредничество, който включва комуникация между страните и търсене на решение на спора.",
                            Question = "Как работи процесът на посредничество чрез тази платформа?"
                        },
                        new
                        {
                            Id = 3,
                            Answer = "Посредничеството предлага множество предимства, включително по-бързо и по-ефективно решаване на спорове, по-ниски разходи, по-добро запазване на отношенията между страните и по-голяма гъвкавост в процеса на вземане на решения.",
                            Question = "Какви са предимствата на посредничеството пред съдебния процес?"
                        });
                });

            modelBuilder.Entity("MediationCorner.Infrastructure.Data.Models.Inquiry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Inquiry identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasComment("Date of the iquiry initiation");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasComment("Inquiry description");

                    b.Property<string>("InitiatorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Iquiry initiator");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasComment("Inquiry initiator's phone number ");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Inquiry title");

                    b.HasKey("Id");

                    b.HasIndex("InitiatorId");

                    b.ToTable("Inquiries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Date = new DateTime(2024, 4, 21, 16, 52, 27, 184, DateTimeKind.Local).AddTicks(3991),
                            Description = "Здравейте, искам да се консултирам относно наемния договор, който подписах с наемодателя си за жилище. Имам няколко въпроса относно правата и задълженията ми като наемател и какви са моите права, ако се появи спор между мен и наемодателя. Благодаря ви предварително за съдействието.",
                            InitiatorId = "6d5800ce-d726-4fc8-83d9-d6b3ac1f591e",
                            PhoneNumber = "00359887654321",
                            Title = "Въпроси относно наемния договор за жилище"
                        },
                        new
                        {
                            Id = 2,
                            Date = new DateTime(2024, 4, 21, 16, 52, 27, 184, DateTimeKind.Local).AddTicks(4031),
                            Description = "важаеми, имаме няколко въпроса относно прилагането на трудовия закон в нашата фирма. Искаме консултация относно правилата за работно време, отпуските, както и процедурите за уволнение и компенсации. Моля, свържете се с нас, за да уговорим среща за консултация. Благодарим ви.",
                            InitiatorId = "6d5800ce-d726-4fc8-83d9-d6b3ac1f591e",
                            PhoneNumber = "00359887654321",
                            Title = "Въпрос относно прилагането на трудовия закон"
                        });
                });

            modelBuilder.Entity("MediationCorner.Infrastructure.Data.Models.Lecturer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Lecturer identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)")
                        .HasComment("Lecturer's name");

                    b.Property<byte[]>("Photo")
                        .HasColumnType("varbinary(max)")
                        .HasComment("Lecturer photo");

                    b.Property<string>("Summary")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasComment("Lecturer's summary");

                    b.HasKey("Id");

                    b.ToTable("Lecturers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Доц. д-р Стефан Иванов",
                            Summary = "Доц. д-р Стефан Иванов е известен правен учен с богат опит в преподаването и научните изследвания. Той притежава докторска степен по право от Софийски университет и се специализира в областта на международното право, правата на човека и сравнителните правни системи. Доц. Иванов е автор на множество статии в престижни правни списания и е представял своите изследвания на международни конференции. Той е бил гост-лектор в реномирани университети в Европа и е бил поканен да проведе ключови речи на различни семинари с правна тематика. Експертизата и страстта на доц. Иванов към правното образование го правят неоценим ресурс за студенти и професионалисти."
                        });
                });

            modelBuilder.Entity("MediationCorner.Infrastructure.Data.Models.MediationRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Request identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("FirstPartyId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Initiator of the mediation request");

                    b.Property<string>("SecondPartyName")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)")
                        .HasComment("Second party name");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasComment("Description of the mediation request");

                    b.Property<string>("firstPartyPhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasComment("Initiator's phone number");

                    b.HasKey("Id");

                    b.HasIndex("FirstPartyId");

                    b.ToTable("MediationRequests");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FirstPartyId = "dea12856-c198-4129-b3f3-b893d8395082",
                            SecondPartyName = "Георги Георгиев",
                            ShortDescription = "Имаме спор със съседите за границите на имота.",
                            firstPartyPhoneNumber = "00359883456789"
                        },
                        new
                        {
                            Id = 2,
                            FirstPartyId = "dea12856-c198-4129-b3f3-b893d8395082",
                            SecondPartyName = "Мария Илиева",
                            ShortDescription = "Необходима е помощ за разрешаване на договорен спор с доставчик.",
                            firstPartyPhoneNumber = "00359883456789"
                        });
                });

            modelBuilder.Entity("MediationCorner.Infrastructure.Data.Models.ProgressStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Current status identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CurrrentStatus")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Current status of the mediation request");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasComment("Date of the status");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Current status description");

                    b.Property<int>("MediationRequestId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MediationRequestId");

                    b.ToTable("ProgressStatuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CurrrentStatus = "В процес на посредничество",
                            Date = new DateTime(2024, 4, 21, 16, 52, 27, 390, DateTimeKind.Local).AddTicks(1980),
                            Description = "Насрочена е дата за среща с двете страни",
                            MediationRequestId = 1
                        },
                        new
                        {
                            Id = 2,
                            CurrrentStatus = "Изчакване",
                            Date = new DateTime(2024, 4, 21, 16, 52, 27, 390, DateTimeKind.Local).AddTicks(1986),
                            Description = "Изчакваме обратна връзка от втората страна по конфликта",
                            MediationRequestId = 2
                        });
                });

            modelBuilder.Entity("MediationCorner.Infrastructure.Data.Models.Response", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Response identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("DateOfResponse")
                        .HasColumnType("datetime2")
                        .HasComment("Date of the response");

                    b.Property<int>("InquiryId")
                        .HasColumnType("int")
                        .HasComment("Inquiry identifier");

                    b.Property<string>("InquiryResponse")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasComment("Response to inquiry");

                    b.HasKey("Id");

                    b.HasIndex("InquiryId")
                        .IsUnique();

                    b.ToTable("Responses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateOfResponse = new DateTime(2024, 4, 21, 16, 52, 27, 437, DateTimeKind.Local).AddTicks(1172),
                            InquiryId = 1,
                            InquiryResponse = "Като наемател имате право да използвате наетото жилище в съответствие с условията на договора за наем.Имате право да живеете в жилище, което е подходящо за живеене и отговаря на минималните здравни и санитарни изисквания. Имате право на мирно ползване на жилището и на неприкосновеност на вашето лично пространство.На наемодателя му се изисква да осигури сигурно жилище и да извършва необходимите ремонти, за да запази жилището в добро състояние. Ако има спор между вас и наемодателя, имате право да потърсите правна помощ и да обжалвате решенията на компетентните органи или съдилища. Можете да ползвате процедури за алтернативно разрешаване на спорове, като например медиация или арбитраж, за да решите спора извън съдебен път."
                        },
                        new
                        {
                            Id = 2,
                            DateOfResponse = new DateTime(2024, 4, 21, 16, 52, 27, 437, DateTimeKind.Local).AddTicks(1180),
                            InquiryId = 2,
                            InquiryResponse = "Здравейте, можете да запазите час за консултация през формата в сайта, като влезете в меню Запази час за консултация."
                        });
                });

            modelBuilder.Entity("MediationCorner.Infrastructure.Data.Models.Seminar", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Seminar identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasComment("Date of the seminar");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Seminar description");

                    b.Property<int>("LecturerId")
                        .HasColumnType("int")
                        .HasComment("Lecturer of the seminar");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasComment("Location where the seminar will take place");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(6,2)")
                        .HasComment("Price for attending the seminar");

                    b.Property<DateTime>("RegistrationDeadline")
                        .HasColumnType("datetime2")
                        .HasComment("Deadline for sign up for the seminar");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Seminar title");

                    b.HasKey("Id");

                    b.HasIndex("LecturerId");

                    b.ToTable("Seminars");

                    b.HasData(
                        new
                        {
                            Id = 2,
                            Date = new DateTime(2024, 11, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Описание: Семинарът ще представи основните правила на Общия регламент за защита на данните (GDPR) и техния принос към защитата на личните данни в бизнес средата. Ще се разгледат и случаи от практиката и съответните правни последици за организациите. Събитето ще се проведе от 09:00 и ще бъде с продължи до 12:30",
                            LecturerId = 1,
                            Location = "гр. Благоевград, Американски Университет, Зала 3",
                            Price = 150.00m,
                            RegistrationDeadline = new DateTime(2024, 10, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Приложение на GDPR в бизнеса: Законодателство и регулации  "
                        },
                        new
                        {
                            Id = 1,
                            Date = new DateTime(2024, 10, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Описание: Семинарът ще обхване теми като правата на наследниците, разпределение на наследството, процедурите за наследствено дело и правните аспекти при разрешаване на спорове относно наследството. Събитето ще се проведе от 09:00 и ще бъде с продължи до 12:30",
                            LecturerId = 1,
                            Location = "гр. Благоевград, Американски Университет, Зала 3",
                            Price = 150.00m,
                            RegistrationDeadline = new DateTime(2024, 9, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Наследствено право и процесуални аспекти"
                        });
                });

            modelBuilder.Entity("MediationCorner.Infrastructure.Data.Models.UserSeminar", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("User identifier");

                    b.Property<int>("SeminarId")
                        .HasColumnType("int")
                        .HasComment("Seminar identifier");

                    b.HasKey("UserId", "SeminarId");

                    b.HasIndex("SeminarId");

                    b.ToTable("UsersSeminars");

                    b.HasData(
                        new
                        {
                            UserId = "dea12856-c198-4129-b3f3-b893d8395082",
                            SeminarId = 2
                        },
                        new
                        {
                            UserId = "6d5800ce-d726-4fc8-83d9-d6b3ac1f591e",
                            SeminarId = 2
                        },
                        new
                        {
                            UserId = "dea12856-c198-4129-b3f3-b893d8395082",
                            SeminarId = 1
                        },
                        new
                        {
                            UserId = "6d5800ce-d726-4fc8-83d9-d6b3ac1f591e",
                            SeminarId = 1
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClaimType = "user:firstName",
                            ClaimValue = "Иван",
                            UserId = "dea12856-c198-4129-b3f3-b893d8395082"
                        },
                        new
                        {
                            Id = 2,
                            ClaimType = "user:firstName",
                            ClaimValue = "Петър",
                            UserId = "6d5800ce-d726-4fc8-83d9-d6b3ac1f591e"
                        },
                        new
                        {
                            Id = 3,
                            ClaimType = "user:firstName",
                            ClaimValue = "Вероника",
                            UserId = "e43ce836-997d-4927-ac59-74e8c41bbfd3"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MediationCorner.Infrastructure.Data.Models.Appointment", b =>
                {
                    b.HasOne("MediationCorner.Infrastructure.Data.Models.ApplicationUser", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("MediationCorner.Infrastructure.Data.Models.Inquiry", b =>
                {
                    b.HasOne("MediationCorner.Infrastructure.Data.Models.ApplicationUser", "Initiator")
                        .WithMany()
                        .HasForeignKey("InitiatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Initiator");
                });

            modelBuilder.Entity("MediationCorner.Infrastructure.Data.Models.MediationRequest", b =>
                {
                    b.HasOne("MediationCorner.Infrastructure.Data.Models.ApplicationUser", "FirstParty")
                        .WithMany()
                        .HasForeignKey("FirstPartyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FirstParty");
                });

            modelBuilder.Entity("MediationCorner.Infrastructure.Data.Models.ProgressStatus", b =>
                {
                    b.HasOne("MediationCorner.Infrastructure.Data.Models.MediationRequest", "MediationRequest")
                        .WithMany()
                        .HasForeignKey("MediationRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MediationRequest");
                });

            modelBuilder.Entity("MediationCorner.Infrastructure.Data.Models.Response", b =>
                {
                    b.HasOne("MediationCorner.Infrastructure.Data.Models.Inquiry", "Inquiry")
                        .WithOne("Response")
                        .HasForeignKey("MediationCorner.Infrastructure.Data.Models.Response", "InquiryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Inquiry");
                });

            modelBuilder.Entity("MediationCorner.Infrastructure.Data.Models.Seminar", b =>
                {
                    b.HasOne("MediationCorner.Infrastructure.Data.Models.Lecturer", "Lecturer")
                        .WithMany()
                        .HasForeignKey("LecturerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lecturer");
                });

            modelBuilder.Entity("MediationCorner.Infrastructure.Data.Models.UserSeminar", b =>
                {
                    b.HasOne("MediationCorner.Infrastructure.Data.Models.Seminar", "Seminar")
                        .WithMany("UsersSeminars")
                        .HasForeignKey("SeminarId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MediationCorner.Infrastructure.Data.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Seminar");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("MediationCorner.Infrastructure.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("MediationCorner.Infrastructure.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MediationCorner.Infrastructure.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("MediationCorner.Infrastructure.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MediationCorner.Infrastructure.Data.Models.Inquiry", b =>
                {
                    b.Navigation("Response");
                });

            modelBuilder.Entity("MediationCorner.Infrastructure.Data.Models.Seminar", b =>
                {
                    b.Navigation("UsersSeminars");
                });
#pragma warning restore 612, 618
        }
    }
}
